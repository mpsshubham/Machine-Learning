randomForest
randomForest()
?randomForest
?Boruta
library(Boruta)
install.packages("Boruta")
library(Boruta)
?randomForest
library(randomForest)
library(Boruta)
install.packages('Boruta')
library(Boruta)
library("Rcpp", lib.loc="~/anaconda2/lib/R/library")
install.packages('Boruta')
library("bindrcpp", lib.loc="~/anaconda2/lib/R/library")
install.packages('Boruta')
conda install gxx_linux-64
conda install gxx_linux-64
conda install "gxx_linux-64"
library(nlme)
library(Boruta)
library(randomForest)
install.packages('Boruta')
library("BH", lib.loc="~/anaconda2/lib/R/library")
library("bindr", lib.loc="~/anaconda2/lib/R/library")
library("config", lib.loc="~/anaconda2/lib/R/library")
library("RcppRoll", lib.loc="~/anaconda2/lib/R/library")
library("RCurl", lib.loc="~/anaconda2/lib/R/library")
install.packages('Boruta')
library(randomForest)
install.packages('Boruta')
install.packages("Boruta")
library(Boruta)
install.packages("Boruta")
shiny::runApp('test/TestCode/apps')
runApp('test/TestCode/apps')
runApp('test/TestCode/apps')
runApp('test/TestCode/apps')
runApp('test/TestCode/apps')
runApp('test/TestCode/apps')
setwd("~/git/Machine-Learning/2.Regression/5.Decision Trees")
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
# rpart = recursive partitioning and regression trees
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# rpart = recursive partitioning and regression trees
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
plot(regressor)
plot(regressor)
text(regressor)
y_pred = predict(regressor, data.frame(Level = 6.5))
